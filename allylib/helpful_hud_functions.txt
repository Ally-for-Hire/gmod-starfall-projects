--- Helpful HUD Functions
-- By Merydian9 / Ally for Hire
-- A general collection of helpful functions for HUDs

--- SHARED Space

--- Function interface data easily between server and client
-- name: the name of the stream
-- value: the data being sent
-- safe: whether or not to resend every second for 3 seconds to make sure it gets to target
function sendData(name, value, safe)
    if safe == nil then
        net.start(name) 
        net.writeType(value) 
        net.send(owner())
        return
    end
        
    timer.create(name, 1, 0, function()
        net.start(name) 
        net.writeType(value) 
        net.send(owner())  
        timer.create("remove " .. name, 3, function()
            timer.remove("remove " .. name)    
        end)  
    end)
end

curtime = timer.curtime

-- CLIENT Space
if CLIENT then
    --- Local Overwrites
    -- Setters
    _setMaterial = render.setMaterial
    _setColor = render.setColor
    _setFont = render.setFont
    
    -- Shapes
    _drawRect = render.drawRect
    _drawRectOutline = render.drawRectOutline
    _drawTexturedRect = render.drawTexturedRect
    _drawCircle = render.drawCircle
    _drawFilledCircle = render.drawFilledCircle
    _drawLine = render.drawLine
    
    -- Text
    _drawText = render.drawText
    _drawSimpleText = render.drawSimpleText
    
    -- RenderTargets
    _createRT = render.createRenderTarget
    _setRTTexture = render.setRenderTargetTexture
    _selectRT = render.selectRenderTarget

    --- Main Color Constants
    -- General Colors
    COL_BLACK = Color(0, 0, 0)
    COL_WHITE = Color(255, 255, 255)
    COL_RED = Color(255, 0, 0)
    COL_GREEN = Color(0, 255, 0)
    COL_BLUE = Color(0, 0, 255)
    
    -- Specific Colors
    COL_PURPLE = Color(255, 0, 255)
    COL_GOLD = Color(255, 200, 0)
    
    -- Color for clearing RenderTargets with
    COL_RENDERTARGET = Color(0, 0, 0, 0)
    
    --- Function to get the endpoint toward a target without overshooting
    -- x1, y1: start coordinates
    -- x2, y2: target coordinates
    -- length: desired segment length (max). If longer than the distance, returns the target
    -- returns: a table {x = number, y = number}
    function getPoint(x1, y1, x2, y2, length)
        local dx = x2 - x1
        local dy = y2 - y1
        local dist = math.sqrt(dx*dx + dy*dy)
        if dist == 0 then
            return { x = x1, y = y1 }
        end
        local scale = math.min(1, length / dist)
        return {x = x1 + dx * scale, y = y1 + dy * scale}
    end

    --- Function to draw a thick line
    -- x1, y1: the starting position coordinates
    -- x2, y2: the end position coordinates
    -- thickness: thickness of line
    function drawThickLine (x1, y1, x2, y2, thickness)
        thickness = thickness or 1
        local perpDir = Vector( y2 - y1, -( x2 - x1 ), 0 ):getNormalized() * thickness / 2
        local perpX = perpDir[1]
        local perpY = perpDir[2]
    
        render.drawPoly({
            { x = x1 + perpX, y = y1 + perpY },
            { x = x2 + perpX, y = y2 + perpY },
            { x = x2 - perpX, y = y2 - perpY },
            { x = x1 - perpX, y = y1 - perpY },
        })
    end
    
    --- Function to a draw a line with space away from the start and end
    -- x1, y1: the starting position coordinates
    -- x2, y2: the ending position coordinates
    -- startLength, endLength: the distance away from the start and end
    -- thickness: the thickness of the line
    function drawSpacedLine(x1, y1, x2, y2, startLength, endLength, thickness)
        local pt1 = getPoint(x1, y1, x2, y2, startLength)
        local pt2 = getPoint(x2, y2, x1, y1, endLength)
        thickness = thickness or 1
        drawThickLine(pt1.x, pt1.y, pt2.x, pt2.y, thickness)
    end

    --- Function to draw a thick circle
    -- x, y: the center position coordinates
    -- thickness: thickness of the circle
    function drawThickCircle(x, y, diameter, thickness)
        for i = 0, thickness - 1, 0.25 do 
            _drawCircle(x, y, diameter + i)
        end
    end
    
    --- Function to draw a rectangle centered on x, y
    -- x, y: the middle of the rectangle
    -- width, height: the width and height of the rectangle
    function drawCenterRect (x, y, width, height) 
        _drawRect(x - width / 2, y - height / 2, width, height)
    end
    
    --- Function to draw a rectangle outline centered on x, y
    -- x, y: the middle of the rectangle
    -- width, height: the width and height of the rectangle
    function drawCenterRectOutline (x, y, width, height, thickness) 
        _drawRectOutline(x - width / 2, y - height / 2, width, height, thickness) 
    end

    --- Function to draw a + centered on x, y with 4 controllable directions
    -- x, y: the middle of the +
    -- up, down: the length for the up and down prongs
    -- left, right: the length for the left and right prongs
    -- thickness: thickness of the prongs
    function drawPlus(x, y, up, down, left, right, thickness)
        if left == nil then
            down = up
            left = up
            right = up
            thickness = down
        end
    
        drawCenterRect(x, y + (down - up) / 2, thickness, up + down)
        drawCenterRect(x + (right - left) / 2, y, left + right, thickness)
    end


    function drawCenterRT (x, y, rtname)
        _setRTTexture(rtname)
        _drawTexturedRect(x - 512, y - 512, 1024, 1024)    
        _setRTTexture()
    end
    
    function initRT (rtName)
        _createRT(rtName)
        return rtName    
    end

    function selectClearRT(rtName)
        _selectRT(rtName)
        render.clear(COL_RENDERTARGET)
    end

    -- Convenient Functions
    rect = _drawRect
    centerRect = drawCenterRect 
    centerRectOutline = drawCenterRectOutline
    rectOutline = _drawRectOutline
    function circle (x, y, diameter, thickness)
        if thickness ~= nil then
            drawThickCircle(x, y, diameter, thickness)
            return
        end
        _drawCircle(x, y, diameter)
    end
    filledCircle  = _drawFilledCircle
    font = _setFont
    color = _setColor
    text = _drawText
    textSimple = _drawSimpleText
    function line (x1, y1, x2, y2, thickness)
        if thickness ~= nil then
            drawThickLine(x1, y1, x2, y2, thickness)
            return
        end
        _drawLine(x1, y1, x2, y2)
    end
    spacedLine = drawSpacedLine
end